<?xml version="1.0" encoding="UTF-8" ?>
<class name="SteamMultiplayerPeer" inherits="MultiplayerPeer" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Provides a bridge between Steam Networking Sockets and Godot's high level [MultiplayerAPI].
	</brief_description>
	<description>
        A [MultiplayerPeer] implementation that connects Steam Networking Sockets to Godot's high level multiplayer API. Should be passed to [MultiplayerAPI].multiplayer_peer after being initialized by calling [code]create_lobby[/code] or [code]connect_lobby[/code].
	</description>
	<tutorials>
		<link title="GodotSteam and SteamMultiplayerPeer - article by Michael Macha">https://michaelmacha.wordpress.com/2024/04/08/godotsteam-and-steammultiplayerpeer/</link>
		<link title="Compiling from source">https://godotsteam.com/howto/multiplayer_peer/</link>
		<link title="Changelog">https://godotsteam.com/changelog/multiplayer_peer/</link>
	</tutorials>
	<members>
		<member name="as_relay" type="bool" setter="set_as_relay" getter="get_as_relay" default="false">
		</member>
		<member name="no_delay" type="bool" setter="set_no_delay" getter="get_no_delay" default="false">
		</member>
		<member name="no_nagle" type="bool" setter="set_no_nagle" getter="get_no_nagle" default="false">
		</member>
	</members>
	<methods>
		<method name="collect_debug_data">
			<return type="Dictionary" />
			<description>
				Returns a list of details about the current lobby.
				The returned dictionary contains the following keys:
				[codeblock]
				┠╴lobby_id (int)
				┠╴lobby_owner (int)
				┠╴lobby_state (int)
				┠╴no_delay (bool)
				┠╴no_nagle (bool)
				┠╴steam_id (int)
				┠╴target_peer (int)
				┖╴unique_id (int)
				[/codeblock]
			</description>
		</method>
		<method name="connect_lobby">
			<return type="int" enum="Error" />
			<param index="0" name="lobby_id" type="int" />
			<description>
				Connect to the Steam lobby by given lobby ID. Signal [code]lobby_joined[/code] will be emitted after attempting to connect.
			</description>
		</method>
		<method name="create_lobby">
			<return type="int" enum="Error" />
			<param index="0" name="lobby_type" type="int" enum="SteamMultiplayerPeer.LobbyType" />
			<param index="1" name="max_players" type="int" default="32" />
			<description>
				Creates a lobby of given with set privacy type and set maximum player amount. Signal [code]lobby_created[/code] will be emitted after lobby creation.
			</description>
		</method>
		<method name="get_all_lobby_data">
			<return type="Dictionary" />
			<description>
				Get all know data about the current lobby.
				Returns a dictionary of key-value pairs.
			</description>
		</method>
		<method name="get_direct_messages">
			<return type="Array" />
			<description>
				Deprecated.
			</description>
		</method>
		<method name="get_lobby_data">
			<return type="String" />
			<param index="0" name="key" type="String" />
			<description>
				Gets the metadata associated with the specified key from the specified lobby.
				[b]Note:[/b] This can only get metadata from lobbies that the client knows about, either after receiving a list of lobbies from lobby_match_list, retrieving the data with requestLobbyData, or after joining a lobby.
			</description>
		</method>
		<method name="get_lobby_id">
			<return type="int" />
			<description>
				Returns the current lobby's ID.
			</description>
		</method>
		<method name="get_peer_id_from_steam64">
			<return type="int" />
			<param index="0" name="steam_id" type="int" />
			<description>
				Converts Steam user ID into peer ID of MultiplayerAPI's current [code]multiplayer_peer[/code].
			</description>
		</method>
		<method name="get_peer_info">
			<return type="Dictionary" />
			<param index="0" name="peer_id" type="int" />
			<description>
				Get a list of data about a given peer.
				The returned dictionary contains the following keys:
				[codeblock]
				┠╴peer_id (int)
				┠╴steam_id (int)
				┠╴pending_packet_count (int)
				┠╴connection_status (string)
				┠╴packets_out_per_sec (float)
				┠╴bytes_out_per_sec (float)
				┠╴packets_in_per_sec (float)
				┠╴bytes_in_per_sec (float)
				┠╴connection_quality_local (float)
				┠╴connection_quality_remote (float)
				┠╴send_rate_bytes_per_second (int)
				┠╴pending_unreliable (string)
				┠╴pending_reliable (string)
				┠╴sent_unacked_reliable (string)
				┠╴queue_time (int)
				┖╴ping (string)
				[/codeblock]
			</description>
		</method>
		<method name="get_peer_map">
			<return type="Dictionary" />
			<description>
				Get the list of all connected peers.
				The returned dictionary contains the following key-value pair:
				[codeblock]
				┖╴{ peer id (int) : steam id (int) }
				[/codeblock]
			</description>
		</method>
		<method name="get_state">
			<return type="int" enum="SteamMultiplayerPeer.LobbyState" />
			<description>
				Get the state of the lobby the local player is currently in.
			</description>
		</method>
		<method name="get_steam64_from_peer_id">
			<return type="int" />
			<param index="0" name="peer_id" type="int" />
			<description>
				Converts peer ID of [MultiplayerAPI]'s current [code]multiplayer_peer[/code] into Steam user ID.
			</description>
		</method>
		<method name="send_direct_message">
			<return type="bool" />
			<param index="0" name="message" type="PackedByteArray" />
			<description>
				Send a direct message as a packet.
			</description>
		</method>
		<method name="set_lobby_data">
			<return type="bool" />
			<param index="0" name="key" type="String" />
			<param index="1" name="value" type="String" />
			<description>
				Sets a key/value pair in the lobby metadata. This can be used to set the the lobby name, current map, game mode, etc. This can only be set by the owner of the lobby. Each user in the lobby will be receive notification of the lobby data change via a [code]lobby_data_update[/code] callback. This will only send the data if it has changed. There is a slight delay before sending the data so you can call this repeatedly to set all the data you need to and it will automatically be batched up and sent after the last sequential call. True if the data has been set successfully. False if key was invalid or value is too long.
			</description>
		</method>
		<method name="set_lobby_joinable">
			<return type="void" />
			<param index="0" name="joinable" type="bool" />
			<description>
				Sets whether or not a lobby is joinable by other players. This always defaults to [code]true[/code] for a new lobby. If joining is disabled, then no players can join, even if they are a friend or have been invited. Lobbies with joining disabled will not be returned from a lobby search.
			</description>
		</method>
	</methods>
		<members>
		<member name="as_relay" type="bool" setter="set_as_relay" getter="get_as_relay" default="false">
		</member>
		<member name="no_delay" type="bool" setter="set_no_delay" getter="get_no_delay" default="false">
		</member>
		<member name="no_nagle" type="bool" setter="set_no_nagle" getter="get_no_nagle" default="false">
		</member>
	</members>
	<signals>
		<signal name="debug_data">
			<param index="0" name="data" type="Dictionary" />
			<description>
				Sends out dumps of internal debug data from [SteamMultiplayerPeer].
			</description>
		</signal>
		<signal name="lobby_chat_update">
			<param index="0" name="lobby_id" type="int" />
			<param index="1" name="changed_id" type="int" />
			<param index="2" name="making_change_id" type="int" />
			<param index="3" name="chat_state" type="int" />
			<description>
				A lobby chat room state has changed, this is usually sent when a user has joined or left the lobby.
			</description>
		</signal>
		<signal name="lobby_created">
			<param index="0" name="result" type="int" />
			<param index="1" name="lobby_id" type="int" />
			<description>
				Gets emitted after creating a lobby and a game server. Creator automatically joins the lobby. Provided that result is [code]Steam.Result.RESULT_OK[/code], callback for this signal would be a good moment to assign the peer to [MultiplayerAPI] by calling [code]multiplayer.set_multiplayer_peer()[/code].
			</description>
		</signal>
		<signal name="lobby_data_update">
			<param index="0" name="success" type="int" />
			<param index="1" name="lobby_id" type="int" />
			<param index="2" name="member_id" type="int" />
			<description>
				The lobby metadata has changed.
			</description>
		</signal>
		<signal name="lobby_joined">
			<param index="0" name="lobby" type="int" />
			<param index="1" name="permissions" type="int" />
			<param index="2" name="locked" type="bool" />
			<param index="3" name="response" type="Steam.ChatRoomEnterResponse" />
			<description>
				Received upon attempting to enter a lobby. Lobby metadata is available to use immediately after receiving this. Provided that result is [code]Steam.ChatRoomEnterResponse.CHAT_ROOM_ENTER_RESPONSE_SUCCESS[/code], callback for this signal would be a good moment to assign the peer to [MultiplayerAPI] by calling [code]multiplayer.set_multiplayer_peer()[/code].
			</description>
		</signal>
		<signal name="lobby_message">
			<param index="0" name="lobby_id" type="int" />
			<param index="1" name="user" type="int" />
			<param index="2" name="message" type="String" />
			<param index="3" name="chat_type" type="int" />
			<description>
				A chat (text or binary) message for this lobby has been received.
			</description>
		</signal>
		<signal name="network_session_failed">
			<param index="0" name="steam_id" type="int" />
			<param index="1" name="reason" type="int" />
			<param index="2" name="connection_state" type="bool" />
			<description>
				Gets emitted when [SteamMultiplayerPeer] fails to establish a message session. Can be used to exit the lobby or retry the connection from client's side. Returned SteamID can be empty, depending on the current state of connection. For more information on reason of failure check [code]reason[/code] in [code]ESteamNetConnectionEnd[/code] and [code]connection_state[/code] in [code]ESteamNetworkingConnectionState[/code] or check output of [code]debug_data[/code] signal.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="LOBBY_TYPE_PRIVATE" value="0" enum="LobbyType">
			Lobby invisible to all other Steam users. The only way to join the lobby is from an invite.
		</constant>
		<constant name="LOBBY_TYPE_FRIENDS_ONLY" value="1" enum="LobbyType">
			Joinable by friends and invitees, but does not show up in the lobby list provided by [Steam] in [code]lobby_match_list[/code] callback.
		</constant>
		<constant name="LOBBY_TYPE_PUBLIC" value="2" enum="LobbyType">
			Returned by search and visible to friends.
		</constant>
		<constant name="LOBBY_TYPE_INVISIBLE" value="3" enum="LobbyType">
			Returned by search, but not visible to other friends.
		</constant>
		<constant name="LOBBY_TYPE_PRIVATE_UNIQUE" value="4" enum="LobbyType">
			Private, unique and does not delete when empty - only one of these may exist per unique keypair set can only create from the Web API.
		</constant>
		<constant name="LOBBY_STATE_NOT_CONNECTED" value="0" enum="LOBBY_STATE">
			The peer is not yet connected to the lobby.
		</constant>
		<constant name="LOBBY_STATE_HOST_PENDING" value="1" enum="LOBBY_STATE">
			The peer is creating a lobby to host.
		</constant>
		<constant name="LOBBY_STATE_HOSTING" value="2" enum="LOBBY_STATE">
			The peer is hosting a lobby.
		</constant>
		<constant name="LOBBY_STATE_CLIENT_PENDING" value="3" enum="LOBBY_STATE">
			The peer is joining a lobby.
		</constant>
		<constant name="LOBBY_STATE_CLIENT" value="4" enum="LOBBY_STATE">
			The peer has joined a lobby as a client.
		</constant>
	</constants>
</class>